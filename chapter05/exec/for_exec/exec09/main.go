package main

import "fmt"

func main() {
	//用for循环打印金字塔

	//编程思路
	//1.打印一个矩形
	/*
	***
	***
	***
	 */

	//2.打印半个金字塔
	/*
	*		1个*
	**		2个*
	***		3个*
	 */

	//3.打印整个金字塔
	/*
		  *		1层 1个* 规律:2 * 层数 -1	空格 2 规律:总层数-当前层数
		 ***	2层 3个* 规律:2 * 层数 -1	空格 1 规律:总层数-当前层数
		*****	3层 5个* 规律:2 * 层数 -1	空格 0 规律:总层数-当前层数
	*/

	//4.将层数做成一个变量

	//5.打印空心金字塔
	/*
		  *		1层 1个* 规律:2 * 层数 -1	空格 2 规律:总层数-当前层数
		 * *	2层 3个* 规律:2 * 层数 -1	空格 1 规律:总层数-当前层数
		*****	3层 5个* 规律:2 * 层数 -1	空格 0 规律:总层数-当前层数
		分析:在我们给每行打印*号时,需要考虑是打印*还是打印空格
		分析结果:每层的第一个和最后一个是打印*,其它就应该是空的,即输出空格
		例外情况:最后一层全部打印*
	*/
	//i 表示层数
	totalNumFloors := 9
	for i := 1; i <= totalNumFloors; i++ {
		//在打印*前先打印空格
		for k := 1; k <= totalNumFloors-i; k++ {
			fmt.Print(" ")
		}
		//j 表示每层打印多少*
		for j := 1; j <= 2*i-1; j++ {
			if j == 1 || j == 2*i-1 || i == totalNumFloors {
				fmt.Print("*")
			} else {
				fmt.Print(" ")
			}
		}
		fmt.Println()
	}
}
